# -*- coding: utf-8 -*-
"""Proyecto_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lvaizPwhGngK_zshi99CqimsraYqj2Wn
"""

!sudo apt install tesseract-ocr
!pip install pytesseract

!pip install colorthief

# Librerías principales
import numpy as np
import cv2
import matplotlib.pyplot as plt
from colorthief import ColorThief
from PIL import Image, ImageEnhance, ImageFilter, ImageOps

# Cargar imagen con OpenCV
img= cv2.imread('IMAGEN.jpeg')
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.figure(figsize=(12,5))
plt.subplot(1,3,1)
plt.imshow(img_rgb)
plt.title('Original')
plt.axis('off')

# Paleta de colores dominantes
color_thief = ColorThief('IMAGEN.jpeg')
dominant_color = color_thief.get_color(quality=1)
color_dominante_rgb = color_thief.get_color()
print(f" Color dominante: {color_dominante_rgb}")

# Paleta de 5 colores dominantes
color_palette_rgb = color_thief.get_palette(color_count=5)
print(f"Paleta de colores: {color_palette_rgb}")

#Filtro de pop art

#Filtro basico
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

plt.subplot(1,3,2)
plt.imshow(img_hsv)
plt.title('Pop Art Colorido')
plt.axis('off')


# Filtro Pop Art (efecto HSV + saturación intensa)
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
img_hsv[:,:,1] = cv2.add(img_hsv[:,:,1], 100)  # Aumentar saturación
pop_art = cv2.cvtColor(img_hsv, cv2.COLOR_HSV2RGB)

plt.subplot(1,3,3)
plt.imshow(pop_art)
plt.title('Pop Art')
plt.axis('off')
plt.show()
# Filtro Cálido con mapa de colores
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
calido = cv2.cvtColor(img, cv2.COLORMAP_AUTUMN)


#Filtros de camara vieja y de colores frios
img_rgb=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
img_gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)#Convertir de BGR A GRAY

filtro = np.array([[0.30, 0.50, 0.12],  # Azul (suave)
    [0.35, 0.65, 0.15],
    [0.40, 0.75, 0.20]
], dtype=np.float32)

frio = cv2.transform(img_rgb, filtro)
img_frio= np.clip(frio, 0, 255).astype(np.uint8)

cam_filter = np.array([
    [0.60, 0.45, 0.95],
    [0.40, 0.55, 0.70],
    [0.20, 0.40, 0.50]
], dtype=np.float32)   #AZUL, VERDE, ROJO
camara = cv2.transform(img_rgb, cam_filter)
img_camara = np.clip(camara, 0, 255).astype(np.uint8)

#Convertir a formato PIL
img_pil = Image.fromarray(img_rgb)

# Filtros de Pillow
#Se hace mucho uso de ImageEnhance
img_contraste = ImageEnhance.Contrast(img_pil).enhance(1.5)
img_brillo = ImageEnhance.Brightness(img_pil).enhance(1.2)
img_bordes = img_pil.filter(ImageFilter.EDGE_ENHANCE_MORE)

plt.figure(figsize=(12,5))

plt.subplot(2,3,1)
plt.imshow(calido)
plt.title('Calidos')
plt.axis('off')



plt.subplot(2,3,2)
plt.imshow(img_gray, cmap="gray")
plt.title('Escala de Grises')
plt.axis("off")

plt.subplot(2,3,3)
plt.imshow(img_frio)
plt.title('Filtro Frio')
plt.axis("off")
plt.show()

plt.figure(figsize=(12,5))

plt.subplot(3,3,1)
plt.imshow(img_camara)
plt.title('Filtro Camara')
plt.axis("off")

plt.subplot(3,3,2)
plt.imshow(img_contraste)
plt.title('Contraste +50% (PIL)')
plt.axis("off")

plt.subplot(3,3,3)
plt.imshow(img_bordes)
plt.title('Realce de Bordes (PIL)')
plt.axis("off")
plt.show()